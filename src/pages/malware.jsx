import React, { useState, useRef  } from "react";
import { PieChart, Pie, Cell, Tooltip, ResponsiveContainer } from "recharts";
import { FaRegCircleCheck } from "react-icons/fa6";
import { IoMdInformationCircleOutline } from "react-icons/io";
import { MdQuestionMark } from "react-icons/md";
import { FaRegEyeSlash } from "react-icons/fa";
import axios from "axios";
import { CSVLink } from "react-csv";
import Cookies from "js-cookie"
import Footer from "./reusable/Footer";
import Export from "../assets/images/ExportBtn.png"
import Search from "../assets/images/Search.svg"
import NewNavbar from "./reusable/NewNavbar";


const vulnerabilityda = {
  data: {
    "Backup file": [],
    "Open Redirect": [],
    "SQL Injection": [],
    "CRLF Injection": [],
    "Path Traversal": [],
    "Htaccess Bypass": [],
    "Weak credentials": [],
    "Command execution": [],
    "Secure Flag cookie": [],
    "Blind SQL Injection": [],
    "HTTP Secure Headers": [
      
    ],
    "XML External Entity": [],
    "Cross Site Scripting": [],
    "HttpOnly Flag cookie": [],
    "Cross Site Request Forgery": [],
    "Potentially dangerous file": [],
    "Server Side Request Forgery": [],
    "Content Security Policy Configuration": [
      
    ],
  },
  status: "completed",
};

const FindIntel = () => {
  const API_BASE_URL = import.meta.env.VITE_API_BASE_URL;
  const accessToken = Cookies.get("access_token");

  const [searchInput, setSearchInput] = useState("");
  const [data, setData] = useState([]);
  const [loading, setLoading] = useState(false); // For loading state
  const [virusTotalTab, setVirusToalTab] = useState("SECURITY POSTURE");
  const [isCertExpanded, setIsCertExpanded] = useState(false);
  const [isDnsExpanded, setIsDnsExpanded] = useState(false);

  const [expandedLibrary, setExpandedLibrary] = useState(null);
  const [searchErr, setSearchErr] = useState("");
  const [isInitialized, setIsInitialized] = useState(false);
  const [searchType, setSearchType] = useState(null);

  const [openPortList, setOpenPortList] = useState(null);
  const [openPortLoading, setOpenPortLoading] = useState(false);
  const [openPortErr, setOpenPortErr] = useState("");

  const [vulnerabilityData, setVulnerabilitydata] = useState(null);
  const [vulnerabilityDataLoading, setVulnerabilityDataLoading] = useState(true);
  const [vulnerabilityDataErr,setVulnerabilityDataErr] = useState("");

  const [subDomainList, setSubDomainList] = useState([]);
  const [subDomainLoading, setSubDomainLoading] = useState(false);
  const [subDomainErr, setSubDomainErr] = useState("");
  const searchIdRef = useRef(0); // A ref to store the latest searchId
  
  const patterns = {
    ip: /^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$/,
    domain: /^(?!:\/\/)([a-zA-Z0-9-]{2,}\.)+[a-zA-Z]{2,}$/,
    hash: /^[a-fA-F0-9]{32}$|^[a-fA-F0-9]{40}$|^[a-fA-F0-9]{64}$|^[a-fA-F0-9]{128}$/,
    url: /^(https?:\/\/)?([\da-z.-]+)\.([a-z.]{2,6})([/\w .-]*)*\/?$/,
  };

  const isValidDomain = async (domain) => {
    try {
      const response = await axios.get(
        `https://dns.google/resolve?name=${domain}`
      );
      return response.data.Answer !== undefined; // Returns true if domain resolves
    } catch (error) {
      return false; // Domain is invalid or does not resolve
    }
  };
  const validateInput = async (input) => {
    for (const [type, regex] of Object.entries(patterns)) {
      if (regex.test(input)) {
        if (type === "domain") {
          const exists = await isValidDomain(input);
          if (!exists) return { isValid: false, type: null }; 
        }
        return { isValid: true, type }; // Return true and the matched type
      }
    }
    return { isValid: false, type: null }; // Return false if no match
  };
  const fetchApiDataWithPolling = async (
    apiName,
    url,
    setData,
    setLoading,
    setErrorMessage,
    maxRetries = 15, // Prevent infinite loop
    retryInterval = 15000 // 10 seconds delay
  ) => {
    let attempts = 0;
    const currentSearchId = searchIdRef.current; // Capture current searchId

    const fetchData = async () => {
      try {
        if (currentSearchId !== searchIdRef.current) {
          // console.log(`Stopping ${apiName} polling as new search started.`);
          return;
        }
        setLoading(true);
        const response = await axios.get(url, {
          headers: { Accept: "application/json", Authorization: `Bearer ${accessToken}`,
        },
        });
  
        console.log(`API Response from ${apiName}`, response.data.data || response.data);
  
        if (response.status === 202) {
          if (attempts < maxRetries) {
            // console.log(`Status 202 received, retrying in ${retryInterval / 1000}s...`);
            attempts++;
            setTimeout(fetchData, retryInterval);
          } else {
            setErrorMessage("Maximum retry limit reached. Data may not be available.");
            setLoading(false);
          }
        } else if (response.status === 200) {
          setData(response.data.data || response.data);
          setLoading(false);
        }
      } catch (error) {
        setErrorMessage(`Error fetching ${apiName}: ${error.message}`);
        console.error(`Error fetching from ${apiName}`, error);
        setLoading(false);
      }
    };
  
    fetchData();
  };


  
  const fetchApiData = async (apiName, url, setData, setLoading, setErrorMessage) => {
    try {
      setLoading(true);
      const response = await axios.get(url, {
        headers: { Accept: "application/json", Authorization: `Bearer ${accessToken}`,
      },
      });
      console.log(`API Response from ${apiName}`, response.data.data || response.data);
      setData(response.data.data || response.data); // Use data.data if API returns nested data
    } catch (error) {
      if (apiName === "vulapi") {
        setErrorMessage(`Failed to fetch Vulnerability data: ${error.message}`);
      } else {
        setErrorMessage(`Failed to fetch data: ${error.message}`);
      }
      console.error(`Error fetching from ${apiName}`, error);
    } finally {
      setLoading(false);
    }
  };
  
  const handleSearch = async (event) => {
    event.preventDefault();
    // Increment searchId to cancel previous polling calls
    searchIdRef.current += 1;

    setLoading(true);
    setVulnerabilityDataLoading(true);
    setSearchErr("");
    setVulnerabilityDataErr("");
    setSubDomainLoading(true);
    setSubDomainErr("");
    setOpenPortErr("");
  
    const result = await validateInput(searchInput);
  
    if (result?.isValid) {
    console.log("search type : ",result.type);

    if(result.type === "domain" || result.type === "url" ||result.type === "ip" ){setVirusToalTab("SECURITY POSTURE");}else{setVirusToalTab("DETECTION");}
      setSearchType(result.type);
      setIsInitialized(true);
      const url = `${API_BASE_URL}/dashboard/find_intel?query=${searchInput}&search_type=${result.type}`;
      const vulnerabilityApiUrl = `${API_BASE_URL}/dashboard/wapiti_scan?query=${searchInput}&search_type=${result.type}`;
      const subDomainApiUrl =`${API_BASE_URL}/dashboard/subdomain_search?query=${searchInput}&search_type=${result.type}`;
      const openPortApiUrl = `${API_BASE_URL}/dashboard/port_scan?query=${searchInput}&search_type=${result.type}`; 
      const promises =[fetchApiData("searchapi", url, setData, setLoading, setSearchErr)];
      
      if(result.type !== "hash") {
        promises.push(
          fetchApiDataWithPolling(
            "openPortApi",
            openPortApiUrl,
            setOpenPortList,
            setOpenPortLoading,
            setOpenPortErr
          )
        );
      }
      if (result.type !== "hash") {
        promises.push(
          fetchApiDataWithPolling(
            "vulnerability API",
            vulnerabilityApiUrl,
            setVulnerabilitydata,
            setVulnerabilityDataLoading,
            setVulnerabilityDataErr
          ),
        );
      }
  
      // Conditionally add the subdomain API call if the criteria are met
      if (result.type !== "ip" && result.type !== "url" && result.type !== "hash") {
        promises.push(
          fetchApiDataWithPolling(
            "subDomainApi",
            subDomainApiUrl,
            setSubDomainList,
            setSubDomainLoading,
            setSubDomainErr
          )
        );
      }
  
      // Execute all promises
      await Promise.all(promises);
    } else {
      // setSearchErr("Invalid input. Please enter a valid IP, domain, or hash.");
      // setLoading(false);
      // setVulnerabilityDataLoading(false);
      // setSubDomainLoading(false);
      // setOpenPortLoading(false);
      if (result?.type === "domain" && !result.exists) {
        setSearchErr("Domain does not exist. Please enter a valid domain.");
      } else {
        setSearchErr("Invalid input. Please enter a valid IP, domain, or hash.");
      }
      
      setLoading(false);
      setVulnerabilityDataLoading(false);
      setSubDomainLoading(false);
      setOpenPortLoading(false);
    }
  };
  
  const flattenAnalysisResults = (data) => {
    if (!data) return [];

    return Object.entries(data).map(([key, value]) => ({
      "Engine Name": value.engine_name || "N/A",
      "Detection Result": value.result || "N/A",
      Category: value.category || "N/A",
    }));
  };

  const prepareCSVData = (analysisResults, virusTotal) => {
    if (!analysisResults && !virusTotal) return [];

    let csvData = [];

    // **1️⃣ Add General Details (VirusTotal Attributes)**
    csvData.push(["General Details"]);
    csvData.push([
      "ID",
      "Registrar",
      "Creation Date",
      "Country",
      "Size (MB)",
      "Last Analysis Date",
      "Community Score",
    ]);
    
    
    csvData.push([
      virusTotal?.id || "N/A",
      virusTotal?.attributes?.registrar || "N/A",
      virusTotal?.attributes?.creation_date
        ? new Date(
            virusTotal.attributes.creation_date * 1000
          ).toLocaleDateString()
        : "N/A",
      virusTotal?.attributes?.country || "N/A",
      virusTotal?.attributes?.size
        ? (virusTotal.attributes.size / (1024 * 1024)).toFixed(3)
        : "N/A",
      virusTotal?.attributes?.last_analysis_date
        ? new Date(
            virusTotal.attributes.last_analysis_date * 1000
          ).toLocaleDateString()
        : "N/A",
      virusTotal?.attributes?.reputation || "N/A",
    ]);
    


    csvData.push([]); // Empty row for spacing

    // **2️⃣ Add Analysis Results (Detection Results)**
    csvData.push(["Detection Results"]);
    csvData.push(["Engine Name", "Detection Result", "Category"]); // CSV Headers
    const flattenedData = flattenAnalysisResults(analysisResults);
    flattenedData.forEach((row) => {
      csvData.push([
        row["Engine Name"],
        row["Detection Result"],
        row["Category"],
      ]);
    });

    csvData.push([]); // Empty row for spacing

    // **3️⃣ Add Categories Section**
    if (
      virusTotal?.attributes?.categories &&
      Object.keys(virusTotal.attributes.categories).length > 0
    ) {
      csvData.push(["Categories"]);
      csvData.push(["Category", "Description"]);
      Object.entries(virusTotal?.attributes?.categories).forEach(
        ([key, value]) => {
          csvData.push([key, value]);
        }
      );
      csvData.push([]); //Empty row for spacing
    }

    // **4️⃣ Add Popularity Ranks Section**
    if (virusTotal?.attributes?.popularity_ranks) {
      csvData.push(["Popularity Ranks"]);
      csvData.push(["Engine", "Rank", "Timestamp"]);
      Object.entries(virusTotal?.attributes?.popularity_ranks).forEach(
        ([key, value]) => {
          csvData.push([key, value.rank, value.timestamp]);
        }
      );
      csvData.push([]); // Empty row for spacing
    }

    // **5️⃣ Add Last DNS Records Section**
    if (virusTotal?.attributes?.last_dns_records) {
      csvData.push(["Last DNS Records"]);
      csvData.push(["Record Type", "TTL", "Value"]);
      virusTotal?.attributes?.last_dns_records.forEach((record) => {
        csvData.push([record.type, record.ttl, record.value]);
      });
      csvData.push([]); // Empty row for spacing
    }

    // **6️⃣ Add Last HTTPS Certificate Section**
    if (virusTotal?.attributes?.last_https_certificate) {
      csvData.push(["Last HTTPS Certificate"]);
      csvData.push(["Certificate Data"]);
      csvData.push([
        JSON.stringify(virusTotal?.attributes?.last_https_certificate, null, 2),
      ]);
      csvData.push([]); // Empty row for spacing
    }

    return csvData;
  };

  const virusTotal = data?.virus_total?.data || {};
  const subDomains = data?.subdomains;
  const openPorts= data?.open_ports;
  const analysisStats = virusTotal?.attributes?.last_analysis_stats;
  const categories = virusTotal?.attributes?.categories;
  const analysisResults =
    data?.virus_total?.data?.attributes?.last_analysis_results;
  const jarmData = virusTotal?.attributes?.jarm;
  const whoisData = virusTotal?.attributes?.whois;
  const formattedData = whoisData?.split("\n").map((line) => {
    const [key, ...valueParts] = line.split(":");
    const value = valueParts.join(":").trim();
    return { key: key.trim(), value };
  });
  const names = [
    "malicious",
    "suspicious",
    "undetected",
    "harmless",
    "timeout",
  ];



  // Filter the object
  let filteredAnalysisStats;
  if (analysisStats) {
    filteredAnalysisStats = Object.fromEntries(
      Object.entries(analysisStats).filter(([key]) => names.includes(key))
    );
  }
  // Prepare data for the PieChart
  const totalStats =
    analysisStats &&
    Object.values(filteredAnalysisStats).reduce((sum, value) => sum + value, 0);


  const chartData = [
    {
      name: "Harmless",
      value: (analysisStats?.harmless ?? 0) + (analysisStats?.undetected ?? 0),
      color: "#3BBA3F",
    },
    {
      name: "Malicious",
      value: (analysisStats?.malicious ?? 0) + (analysisStats?.suspicious ?? 0),
      color: "#FF8042",
    },
    {
      name: "Other",
      value:
        totalStats -
        (analysisStats?.harmless ?? 0) -
        (analysisStats?.undetected ?? 0) -
        (analysisStats?.suspicious ?? 0) -
        (analysisStats?.malicious ?? 0),
      color: "gray",
    },
  ];

  // Custom Tooltip component
  const CustomTooltip = ({ active, payload }) => {
    if (active && payload && payload.length) {
      return (
        <div className="p-2 bg-white border rounded shadow">
          <p className="font-semibold">{payload[0].name}</p>
          <p>Value: {payload[0].value}</p>
        </div>
      );
    }
    return null;
  };

  const convertUnixToDate = (timestamp) => {
    const date = new Date(timestamp * 1000); // Multiply by 1000 for milliseconds
    return date.toLocaleString("en-US");
  };
  const toggleLibrary = (libraryName) => {
    setExpandedLibrary(expandedLibrary === libraryName ? null : libraryName);
  };
  const limitedImportList = virusTotal?.attributes?.pe_info?.import_list?.slice(
    0,
    3
  );

  const allowedTypes = [
    "Win32 EXE",
    "executable",
    "windows",
    "win32",
    "pe",
    "peexe",
  ];
  const aRecord = virusTotal?.attributes?.last_dns_records?.find(
    (item) => item.type === "A"
  );
 
  return (
    <div className="bg-midnightBlue min-h-screen min-w-screen flex flex-col">
      <NewNavbar />
      <main className="flex-1 text-white min-h-screen">
  
      {/* Search Section with Light Gray Background */}
      <div className="bg-[#F5F5F5] p-1 shadow-md w-full">
        <form onSubmit={handleSearch} className="w-full">
          {/* Mobile & Desktop Combined Flex Row */}
          <div className="w-full mx-auto max-w-7xl flex py-2 flex-row items-center gap-2 w-full flex-wrap sm:flex-nowrap">
            {/* Title */}
            <h1 className="text-black text-2xl font-semibold w-full sm:w-[22%] lg:w-[14%] text-center sm:text-left">Find Intel</h1>

            {/* Search Input */}
            <input
              type="text"
              value={searchInput}
              onChange={(e) => [setSearchInput(e.target.value), setSearchErr("")]}
              placeholder="URL, IP address, domain, or file hash"
              className="w-[200px] h-[22px] sm:h-auto sm:flex-grow text-black px-2 py-1 sm:px-4 sm:py-2 border rounded shadow-sm focus:outline-none focus:ring-2 focus:border-blue-500"
              />

            {/* Export Button Icon */}
            {(analysisResults && Object.keys(analysisResults).length > 0) || virusTotal ? (
              <CSVLink
                data={prepareCSVData(analysisResults, virusTotal)}
                filename="analysis_results.csv"
                className=" text-white p-2 flex items-center justify-center"
              >
                <img src={Export} alt="Export CSV" className="h-5 w-5" />
              </CSVLink>
            ) : null}

            {/* Search Button */}
            <div
              onClick={handleSearch}
              className="flex items-center gap-1 bg-vibrantOrange text-white px-3 py-2 rounded shadow cursor-pointer"
            >
              <button className="focus:outline-none">Search</button>
              <span className="flex items-center">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                  strokeWidth="1.5"
                  stroke="currentColor"
                  className="w-4 h-4 text-white"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    d="M21 21l-4.35-4.35M17.65 13.65A7.35 7.35 0 1113.65 3.7 7.35 7.35 0 0117.65 13.65z"
                  />
                </svg>
              </span>
            </div>
          </div>
    
        </form>
      </div>

  {/* Error Message */}
  {searchErr && <p className="text-red-500 mt-4 text-center">{searchErr}</p>}

  {/* Loading Indicator */}
 {loading ? (
  <div className="flex flex-col items-center justify-center mt-16 w-full">
    <div className="animate-spin rounded-full h-8 w-8 border-t-4 border-blue-500 mb-4"></div>
    <p className="text-xl font-semibold text-center">Analyzing Data...</p>  </div> 
) : isInitialized && data && Object.keys(data).length === 0 ? (
  <p className="text-center pt-16">No data available</p>
) : data && Object.keys(data).length > 0 ? (
  (["domain", "url", "ip_address", "file"].includes(data?.virus_total?.data?.type)) && (
    <div className="py-4 sm:px-16 px-2">
      <h1 className="text-lg ml-4 mt-4 font-bold">VirusTotal</h1>
      <hr className="border-gray-700 my-4" />
      <div className="bg-slateGray text-white rounded-md p-4 flex flex-row gap-4 w-full max-w-full items-start">
      {/* Left: Pie Chart */}
      <div className="w-[160px] flex-shrink-0 flex flex-col items-center justify-center relative">
        <ResponsiveContainer width={140} height={140}>
          <PieChart>
            <Pie
              data={chartData}
              dataKey="value"
              cx="50%"
              cy="50%"
              innerRadius={35}
              outerRadius={60}
              startAngle={90}
              endAngle={450}
              stroke="none"
            >
              {chartData?.map((entry, index) => (
                <Cell key={`cell-${index}`} fill={entry.color} />
              ))}
            </Pie>
            <Tooltip
              contentStyle={{ fontSize: "13px", padding: "5px" }}
              wrapperStyle={{ zIndex: 50 }}
            />
          </PieChart>
        </ResponsiveContainer>
        <div className="absolute top-[60px] left-1/2 transform -translate-x-1/2 text-white font-bold text-sm">
          {analysisStats?.malicious}/{totalStats}
        </div>
        <p className="text-center text-xs mt-2 whitespace-nowrap">
          Community Score {virusTotal?.attributes?.reputation}
        </p>
      </div>

      {/* Divider */}
      <div className="h-full border-l border-gray-500 mx-2 hidden md:block"></div>

      {/* Right: Info */}
      <div className="flex-grow flex flex-col text-xs overflow-hidden">
      <h3 className="text-base font-semibold mb-2 truncate pl-[30px] md:hidden">
          {virusTotal?.id || "INSTAGRAM.COM"}
        </h3>

        {/* Info Rows: Mobile View */}
        <div className="space-y-2 md:hidden">
          {[
            { label: "IP", value: aRecord?.value },
            { label: "Registrar", value: virusTotal?.attributes?.registrar },
            {
              label: "Creation Date",
              value: virusTotal?.attributes?.creation_date
                ? new Date(virusTotal?.attributes?.creation_date * 1000).toLocaleDateString()
                : "N/A",
            },
            {
              label: "Last Analysis",
              value: virusTotal?.attributes?.last_analysis_date
                ? new Date(virusTotal?.attributes?.last_analysis_date * 1000).toLocaleDateString()
                : "N/A",
            },
          ].map((item, idx) => (
            <div key={idx} className="flex items-center gap-4">
              <span className=" min-w-[80px]">{item.label}</span>
              <div className="flex items-center gap-1">
                {/* <FaRegCircleCheck className="text-green-400 flex-shrink-0 w-4 h-4" /> */}
                <span className="truncate">{item.value || "N/A"}</span>
              </div>
            </div>
          ))}
        </div>

        {/* Info Rows: Large Screen View */}
        <div className="hidden md:flex flex-wrap justify-between text-sm pt-4 pb-2">
          {virusTotal?.type !== "url" ? (
            <p className="font-semibold sm:text-sm text-xs">{virusTotal?.id || "N/A"}</p>
          ) : (
            <p></p>
          )}

          {aRecord && (
            <div className="flex-col border-l px-4 text-xs space-y-2">
              <label>IP</label>
              <p>{aRecord ? aRecord.value : "N/A"}</p>
            </div>
          )}

          {virusTotal?.attributes?.registrar && (
            <div className="flex-col border-l px-4 text-xs space-y-2">
              <label>Registrar</label>
              <p>{virusTotal?.attributes?.registrar || "N/A"}</p>
            </div>
          )}

          {virusTotal?.attributes?.creation_date && (
            <div className="flex-col border-l px-4 text-xs space-y-2">
              <label>Creation Date</label>
              <p>
                {new Date(virusTotal?.attributes?.creation_date * 1000).toLocaleDateString() || "N/A"}
              </p>
            </div>
          )}

          {virusTotal?.attributes?.country && (
            <div className="flex-col border-l px-4 text-xs space-y-2">
              <label>Country</label>
              <p>{virusTotal?.attributes?.country || "N/A"}</p>
            </div>
          )}

          {virusTotal?.attributes?.size && (
            <div className="flex-col border-l px-4 text-xs space-y-2">
              <label>Size</label>
              <p>
                {`${(virusTotal?.attributes?.size / (1024 * 1024)).toFixed(3)} MB` || "N/A"}
              </p>
            </div>
          )}

          {virusTotal?.attributes?.last_analysis_date && (
            <div className="flex-col border-l px-4 text-xs space-y-2">
              <label>Last Analysis Date</label>
              <p>
                {new Date(virusTotal?.attributes?.last_analysis_date * 1000).toLocaleDateString() ||
                  "N/A"}
              </p>
            </div>
          )}
        </div>

        {/* Tags */}
        <div className="mt-4 w-full overflow-x-auto whitespace-nowrap pb-2">
          {categories &&
            Object.keys(categories).length > 0 &&
            Object.keys(categories).map((key, ind) => (
              <span
                key={ind}
                className="inline-block text-xs bg-successGreen opacity-90 px-2 py-1 rounded-full text-center mr-2 last:mr-0"
              >
                {categories[key]}
              </span>
            ))}
          {virusTotal?.attributes?.tags?.map((item, ind) => (
            <span
              key={ind}
              className="inline-block text-xs bg-successGreen opacity-90 px-2 py-1 rounded-full mr-2 last:mr-0"
            >
              {item}
            </span>
          ))}
        </div>
      </div>
      </div>


              {/* analysisResults Data render */}

              <div className="mt-6">
                <div className="mb-4 flex border-b border-blue-600 text-white opacity-80 font-semibold text-sm">
                  {(searchType === "domain" || searchType === "url" || searchType === "ip") && (
                    <div
                      onClick={() => setVirusToalTab("SECURITY POSTURE")}
                      className={`${
                        virusTotalTab === "SECURITY POSTURE" &&
                        "border-b-2 border-blue-400 text-blue-400"
                      } px-6 py-2 hover:text-blue-400 `}
                    >
                      SECURITY POSTURE
                    </div>
                  )}

                  <div
                    onClick={() => setVirusToalTab("DETECTION")}
                    className={`${
                      virusTotalTab === "DETECTION" &&
                      "border-b-2 border-blue-400 text-blue-400"
                    } px-6 py-2 hover:text-blue-400 `}
                  >
                    DETECTION
                  </div>
                  <div
                    onClick={() => setVirusToalTab("DETAILS")}
                    className={`${
                      virusTotalTab === "DETAILS" &&
                      "border-b-2 border-blue-400 text-blue-400"
                    } px-6 py-2 hover:text-blue-400 `}
                  >
                    DETAILS
                  </div>
                  {/* <div
                    onClick={() => setVirusToalTab("RELATIONS")}
                    className={`${
                      virusTotalTab === "RELATIONS" &&
                      "border-b-2 border-blue-400 text-blue-400"
                    } px-6 py-2 hover:text-blue-400 `}
                  >
                    RELATIONS
                  </div> */}
                </div>
                {(searchType === "domain" || searchType === "url" || searchType === 'ip') &&
                virusTotalTab === "SECURITY POSTURE" ? (
                  <>
                    {virusTotal?.type != "file" && (
                      <div className={` ${searchType !== "url" ? 'md:grid-cols-2' : ''} grid grid-cols-1 gap-6  text-white font-sans`}>



                      {/* Open Ports Section */}
                      {searchType !== "url" && (<div className="border border-gray-700 p-4 rounded-lg bg-deepNavy w-full min-h-[250px] p-4">
                        <h2 className="text-lg font-semibold pb-2 mb-2 border-b border-gray-800 ">Open Ports</h2>

                        {/* This wrapper maintains the structure for data while centering only the loading */}
                        <div className="relative min-h-[200px] flex items-start">
                          {openPortLoading ? (
                            <div className="absolute inset-0 flex justify-center items-center">
                              <div className="flex flex-col items-center gap-2 text-blue-400">
                                
                                <div className="animate-spin rounded-full h-6 w-6 border-t-4 border-blue-500"></div>
                                <p>Loading...</p>
                              </div>
                            </div>
                          ) : openPortErr ? (
                            <p className="text-red-500 text-sm">{openPortErr}</p>
                          ) : openPortList && openPortList?.ports?.length > 0 ? (
                            <div className="text-sm p-3 overflow-x-auto flex flex-wrap gap-2">
                              {openPortList?.ports?.map((port, index) => (
                                <span
                                  key={index}
                                  className="text-white bg-successGreen px-4 py-1 rounded-md text-center min-w-[50px] font-mono"
                                >
                                  {port}
                                </span>
                              ))}
                            </div>
                          ) : (
                            <p className="text-sm text-gray-500">No open ports found</p>
                          )}
                        </div>
                      </div>)}
                      


                      {/* DNS Records Section */}
                      {searchType !== "ip" && searchType !== "url" && ( <div className="border border-gray-700 p-4 rounded-lg bg-deepNavy">
                        <div className="flex justify-between items-center border-b border-gray-800 pb-2 mb-2">
                          <h2 className="text-lg font-semibold">DNS Records</h2>
                          <button className="text-sm text-gray-400" onClick={() => setIsDnsExpanded(!isDnsExpanded)}>
                            {isDnsExpanded ? "▼ Collapse" : "▲ Expand"}
                          </button>
                        </div>

                        { virusTotal?.attributes?.last_dns_records ? (
                          <div className={`overflow-y-auto ${isDnsExpanded ? "max-h-none" : "max-h-48"}`}>
                            <table className="table-auto w-full text-sm">
                              <thead>
                                <tr className="text-gray-400 border-b border-gray-700">
                                  <th className="px-4 py-2 text-left w-1/4">Type</th>
                                  <th className="px-4 py-2 text-left w-1/4">TTL</th>
                                  <th className="px-4 py-2 text-left w-1/2">Value</th>
                                </tr>
                              </thead>
                              <tbody>
                                {virusTotal.attributes?.last_dns_records?.map((record, index) => (
                                  <tr key={index} className="border-b border-gray-700">
                                    <td className="px-4 py-2">{record.type}</td>
                                    <td className="px-4 py-2">{record.ttl}</td>
                                    <td className="px-4 py-2 break-words">{record.value}</td>
                                  </tr>
                                ))}
                              </tbody>
                            </table>
                          </div>
                        ) : (
                          <p className="text-sm">No DNS records available</p>
                        )}
                      </div>)}
                     

                      {/* Vulnerability Section */}
                      <div className="border border-gray-700 p-4 rounded-lg bg-deepNavy max-h-[600px] overflow-y-auto">

                        <h2 className="text-lg font-semibold border-b border-gray-800 pb-2 mb-2">
                          Vulnerabilities
                        </h2>

                        {/* Wrapper ensures loading animation is centered, but nothing else moves */}
                        <div className="relative min-h-[200px]">
                          {vulnerabilityDataLoading ? (
                            <div className="absolute inset-0 flex justify-center items-center">
                              <div className="flex items-center flex-col gap-2 text-blue-400">
                                <div className="animate-spin rounded-full h-6 w-6 border-t-4 border-blue-500"></div>
                                <p>Loading...</p>
                              </div>
                            </div>
                          ) : vulnerabilityDataErr ? (
                            <p className="text-red-500 text-sm">{vulnerabilityDataErr}</p>
                          ) : vulnerabilityData?.json_data ? (
                            <div className="text-sm p-3 rounded-md overflow-x-auto">
                              {/* Show ID */}
                              <p className="text-blue-400">ID: {vulnerabilityData?.id}</p>

                              {/* Show Updated At */}
                              <p className="text-blue-400 text-xs mt-1">
                                Updated At: {new Date(vulnerabilityData?.updated_at).toLocaleString()}
                              </p>

                              {/* Iterate through vulnerabilities */}
                              {Object.entries(vulnerabilityData?.json_data?.vulnerabilities || {}).map(([key, items]) => (
                                <div key={key} className="mt-4 border-b border-gray-700 pb-2">
                                  <h3 className="font-semibold text-md text-yellow-400">{key}</h3>

                                  {/* If the vulnerability has data, display it */}
                                  {Array.isArray(items) && items.length > 0 ? (
                                    items.map((item, index) => (
                                      <div key={index} className="border-t border-gray-700 py-2 px-2 bg-gray-900 rounded-md">
                                        {Object.entries(item).map(([itemKey, value], i) => (
                                          <p key={i} className="text-sm text-gray-300">
                                            <span className="text-green-400">{itemKey}:</span> {JSON.stringify(value)}
                                          </p>
                                        ))}
                                      </div>
                                    ))
                                  ) : (
                                    <p className="text-sm text-gray-500">None Detected</p>
                                  )}
                                </div>
                              ))}
                            </div>
                          ) : (
                            <p className="text-sm">No vulnerability data available</p>
                          )}
                        </div>
                      </div>





                    {/* Subdomains Section */}
                    {searchType !== "ip" &&  searchType !== "url" && ( <div className="border border-gray-700 p-4 rounded-lg bg-deepNavy max-h-[600px] overflow-y-auto">
                      <h2 className="text-lg font-semibold border-b border-gray-800 pb-2 mb-2">
                        Subdomains
                      </h2>

                      {/* Wrapper to ensure only loading is centered */}
                      <div className="relative min-h-[200px]">
                        {subDomainLoading ? (
                          <div className="absolute inset-0 flex justify-center items-center">
                            <div className="flex items-center flex-col gap-2 text-blue-400">
                              <div className="animate-spin rounded-full h-6 w-6 border-t-4 border-blue-500"></div>
                              <p>Loading...</p>
                            </div>
                          </div>
                        ) : subDomainErr ? (
                          <p className="text-red-500 text-sm">{subDomainErr}</p>
                        ) : subDomainList && subDomainList?.subdomains?.length > 0 ? (
                          <div className="text-sm p-3 rounded-md overflow-x-auto">
                            {subDomainList?.subdomains?.map((item, ind) => (
                              <p
                                key={ind}
                                className="text-yellow-400 text-md py-1 px-2 hover:bg-gray-600 rounded-md"
                              >
                                {item}
                              </p>
                            ))}
                          </div>
                        ) : (
                          <p className="text-sm text-gray-500">No subdomains found</p>
                        )}
                      </div>
                    </div>)}
                    


                    
 {/* Vulnerability Section */}
{/* <div className="mb-6">
  <p className="text-lg font-semibold border-y border-gray-800 py-1 px-2 mb-2">
    Vulnerability
  </p>

  {vulnerabilityDataLoading ? (
    <div>Loading vulnerability...</div>
  ) : vulnerabilityDataErr ? (
    <p className="text-red-500 text-center mt-4">{vulnerabilityDataErr}</p>
  ) : vulnerabilityData && Object.keys(vulnerabilityData).length > 0 ? (
    Object.keys(vulnerabilityData).map((key) => (
      <div key={key} className="pb-4">
        <h2 className="text-lg font-semibold">{key}</h2>

        {Array.isArray(vulnerabilityData[key]) && vulnerabilityData[key].length > 0 ? (
          vulnerabilityData[key].map((item, index) => (
            <div key={index} className="border-t border-gray-700 py-2 px-2">
              {Object.keys(item).map((itemKey, i) => (
                <p key={i}>
                  {itemKey}: {item[itemKey]}
                </p>
              ))}
            </div>
          ))
        ) : (
          <p className="text-sm">No vulnerability</p>
        )}
      </div>
    ))
  ) : (
    <p className="text-sm text-center">No vulnerability data available</p>
  )}
</div> */}


                        {/* Subdomains Section */}
                        {/* {subDomains && subDomains.length > 0 && (
                          <div className="mb-6">
                            <h2 className="text-lg font-semibold  border-y border-gray-700 py-2 px-2 mb-2">
                              SubDomains
                            </h2>
                            <div className="bg-gray-800 p-2">
                              {subDomains.map((item, ind) => (
                                <p
                                  key={ind}
                                  className="text-white w-full mb-1 text-md text-black px-2  hover:bg-gray-600"
                                >
                                  {item}
                                </p>
                              ))}
                            </div>
                          </div>
                        )} */}

                        {/* Last DNS Records Section */}
                        {/* {virusTotal?.attributes?.last_dns_records && (
                          <div className="mb-6">
                            <div className="flex justify-between items-center border-y border-gray-700 py-1 px-2">
                              <h2 className="font-semibold text-lg ">
                                Last DNS records
                              </h2>
                              <button
                                className="text-sm text-gray-400 focus:outline-none"
                                onClick={() => setIsDnsExpanded(!isDnsExpanded)}
                              >
                                {isDnsExpanded ? "▼ Collapse" : "▲ Expand"}
                              </button>
                            </div>
                            <div
                              className={`bg-gray-800 rounded-md ${
                                isDnsExpanded
                                  ? "max-h-none"
                                  : "max-h-64 overflow-y-auto"
                              }`}
                            >
                              <table className="table-auto w-full text-left text-sm">
                                <thead>
                                  <tr className="text-gray-400">
                                    <th className="px-2 py-2">Record type</th>
                                    <th className="px-2 py-2">TTL</th>
                                    <th className="px-2 py-2">Value</th>
                                  </tr>
                                </thead>
                                <tbody>
                                  {virusTotal?.attributes?.last_dns_records.map(
                                    (record, index) => (
                                      <tr key={index}>
                                        <td className="px-2 py-2">
                                          {record.type}
                                        </td>
                                        <td className="px-2 py-2">
                                          {record.ttl}
                                        </td>
                                        <td className="px-2 py-2">
                                          {record.value}
                                        </td>
                                      </tr>
                                    )
                                  )}
                                </tbody>
                              </table>
                            </div>
                          </div>
                        )} */}
                      </div>
                    )}
                    {virusTotal?.type === "file" && (
                      //  <div className="bg-gray-900 text-white min-h-screen p-6 font-sans">

                      <div className="mb-6">
                        <div className=" p-4 rounded-md">
                          <div className="text-sm font-semibold mb-4 border-y border-gray-700 py-2">
                            Basic Properties
                          </div>
                          <ul className="space-y-2 text-sm">
                            <li className="flex ">
                              <span className="w-1/6 font-medium capitalize">
                                md5
                              </span>
                              <span className="flex-grow">
                                {virusTotal?.attributes?.md5}
                              </span>
                            </li>
                            <li className="flex">
                              <span className="w-1/6 font-medium capitalize">
                                SHA1
                              </span>
                              <span className="flex-grow">
                                {virusTotal?.attributes?.sha1}
                              </span>
                            </li>
                            <li className="flex">
                              <span className="w-1/6 font-medium capitalize">
                                SHA-256
                              </span>
                              <span className="flex-grow">
                                {virusTotal?.attributes?.sha256}
                              </span>
                            </li>
                            <li className="flex">
                              <span className="w-1/6 font-medium capitalize">
                                Vhash
                              </span>
                              <span className="flex-grow">
                                {virusTotal?.attributes?.vhash}
                              </span>
                            </li>
                            <li className="flex">
                              <span className="w-1/6 font-medium capitalize">
                                Authentihash
                              </span>
                              <span className="flex-grow">
                                {virusTotal?.attributes?.authentihash}
                              </span>
                            </li>
                            <li className="flex">
                              <span className="w-1/6 font-medium capitalize">
                                Imphash
                              </span>
                              <span className="flex-grow">
                                {virusTotal?.attributes?.pe_info?.imphash}
                              </span>
                            </li>
                            <li className="flex">
                              <span className="w-1/6 font-medium capitalize">
                                SSDEEP
                              </span>
                              <span className="flex-grow">
                                {virusTotal?.attributes?.ssdeep} bytes
                              </span>
                            </li>
                            <li className="flex">
                              <span className="w-1/6 font-medium capitalize">
                                TLSH
                              </span>
                              <span className="flex-grow">
                                {virusTotal?.attributes?.tlsh}
                              </span>
                            </li>
                            <li className="flex">
                              <p className="w-1/6 text-sm font-semibold">
                                File Type
                              </p>

                              <ul className="flex flex-grow flex-wrap space-x-2 text-sm">
                                {virusTotal?.attributes?.trid?.map(
                                  (item, idx) => (
                                    <li key={idx} className="flex items-center">
                                      <span>{item.file_type}</span>
                                      {idx !==
                                        virusTotal?.attributes?.trid?.length -
                                          1 && <span className="px-1">|</span>}
                                    </li>
                                  )
                                )}
                              </ul>
                            </li>
                            <li className="flex">
                              <span className="w-1/6 font-medium capitalize text-sm">
                                Magic
                              </span>
                              <span className="flex-grow">
                                {virusTotal?.attributes?.magic}{" "}
                              </span>
                            </li>
                            <div className="flex items-center text-sm">
                              <h2 className="w-1/6 text-sm font-semibold ">
                                Trid
                              </h2>
                              <ul className="flex flex-wrap space-x-2 text-sm">
                                {virusTotal?.attributes?.trid?.map(
                                  (item, idx, arr) => (
                                    <li key={idx} className="flex items-center">
                                      <span>
                                        {item.file_type} {item.probability}
                                      </span>
                                      {idx !== arr.length - 1 && (
                                        <span className=""> | </span>
                                      )}
                                    </li>
                                  )
                                )}
                              </ul>
                            </div>
                            <div className="flex items-center">
                              <h2 className="w-1/6 font-semibold text-sm ">
                                DetectItEasy
                              </h2>
                              <ul>
                                <li className="flex space-x-4 text-sm">
                                  <span>
                                    {
                                      virusTotal?.attributes?.detectiteasy
                                        ?.filetype
                                    }
                                  </span>
                                  {/* Map and format values */}
                                  {virusTotal?.attributes?.detectiteasy?.values?.map(
                                    (item, idx) => (
                                      <span key={idx} className="ml-2">
                                        {item.type}: {item.name}{" "}
                                        {item.info ? `(${item.info})` : ""}{" "}
                                        {item.version
                                          ? `[v${item.version}]`
                                          : ""}
                                      </span>
                                    )
                                  )}
                                </li>
                              </ul>
                            </div>

                            <li className="flex">
                              <span className="w-1/6 font-medium  text-sm capitalize">
                                Magika
                              </span>
                              <span className="flex-grow">
                                {virusTotal?.attributes?.magika}
                              </span>
                            </li>
                            <li className="flex">
                              <span className="w-1/6 font-medium capitalize">
                                file size
                              </span>
                              <span className="flex-grow">
                                {virusTotal?.attributes?.size}
                              </span>
                            </li>
                            <div className="my-4">
                              <div className="text-md mt-8 font-semibold border-y border-gray-700 py-2 mb-1">
                                History
                              </div>
                              <div className=" rounded-md mb-8">
                                <ul className="space-y-2">
                                  <li className="flex">
                                    <span className="w-1/6 font-medium capitalize">
                                      first submission date
                                    </span>
                                    <span className="flex-grow">
                                      {convertUnixToDate(
                                        virusTotal?.attributes
                                          ?.first_submission_date
                                      )}
                                    </span>
                                  </li>
                                  <li className="flex">
                                    <span className="w-1/6 font-medium capitalize">
                                      Last Submission Date
                                    </span>
                                    <span className="flex-grow">
                                      {convertUnixToDate(
                                        virusTotal?.attributes
                                          ?.last_submission_date
                                      )}
                                    </span>
                                  </li>
                                  <li className="flex">
                                    <span className="w-1/6 font-medium capitalize">
                                      last_analysis_date
                                    </span>
                                    <span className="flex-grow">
                                      {convertUnixToDate(
                                        virusTotal?.attributes
                                          ?.last_analysis_date
                                      )}
                                    </span>
                                  </li>
                                
                                </ul>
                              </div>
                            </div>
                            <div className="text-lg font-semibold my-6 border-y border-gray-700 py-2">
                              Portable Executable Info
                            </div>
                            <h2 className="text-lg">Sections</h2>
                            <div className=" rounded-md sm:w-[90%]">
                              <ul className="flex font-semibold mb-2 ">
                                <li className="w-1/6">Name</li>
                                <li className="w-1/6">Virtual Address</li>
                                <li className="w-1/6">Virtual Size</li>
                                <li className="w-1/6">Raw Size</li>
                                <li className="w-1/6">Entropy</li>
                                <li className="w-2/6">MD5</li>
                                <li className="w-1/6">Chi2</li>
                              </ul>
                              {virusTotal?.attributes?.pe_info?.sections?.map(
                                (section, idx) => (
                                  <ul
                                    key={idx}
                                    className="flex p-1 rounded-md mb-2"
                                  >
                                    <li className="w-1/6">{section.name}</li>
                                    <li className="w-1/6">
                                      {section.virtual_address}
                                    </li>
                                    <li className="w-1/6">
                                      {section.virtual_size}
                                    </li>
                                    <li className="w-1/6">
                                      {section.raw_size}
                                    </li>
                                    <li className="w-1/6">{section.entropy}</li>
                                    <li className="w-2/6">{section.md5}</li>
                                    <li className="w-1/6">{section.chi2}</li>
                                  </ul>
                                )
                              )}
                            </div>
                            <div className="mt-6">
                              <h2 className="text-md font-semibold">Imports</h2>
                              <ul className="space-y-4 py-2">
                                {limitedImportList?.map((library, idx) => (
                                  <li key={idx} className="text-sm">
                                    {/* Library Name */}
                                    <button
                                      className="text-xl font-bold text-blue-500"
                                      onClick={() =>
                                        toggleLibrary(library.library_name)
                                      }
                                    >
                                      {expandedLibrary === library.library_name
                                        ? "-"
                                        : "+"}
                                    </button>
                                    <span className="text-sm font-medium px-2">
                                      {library.library_name}
                                    </span>
                                    {/* Imported Functions */}
                                    {expandedLibrary ===
                                      library?.library_name && (
                                      <ul className="mt-2 ml-4 space-y-1">
                                        {library?.imported_functions?.map(
                                          (func, funcIdx) => (
                                            <li
                                              key={funcIdx}
                                              className="text-sm"
                                            >
                                              {func}
                                            </li>
                                          )
                                        )}
                                      </ul>
                                    )}
                                  </li>
                                ))}
                              </ul>
                            </div>
                            <div>
                              <div className="mt-4">
                                <h2 className="text-sm font-semibold ">
                                  Contained Resources by Type
                                </h2>
                                <ul className="space-y-2 py-2">
                                  {Object.entries(
                                    virusTotal?.attributes?.pe_info
                                      ?.resource_types
                                  ).map(([type, count], idx) => (
                                    <li key={idx} className="flex">
                                      <span className="w-1/3 ">{type}</span>
                                      <span className="flex-grow">{count}</span>
                                    </li>
                                  ))}
                                </ul>
                              </div>
                              <div className="my-2">
                                <h2 className="text-sm font-semibold py-2">
                                  Contained Resources by Languages
                                </h2>
                                <ul className="space-y-2">
                                  {Object.entries(
                                    virusTotal?.attributes?.pe_info
                                      ?.resource_langs
                                  ).map(([type, count], idx) => (
                                    <li key={idx} className="flex">
                                      <span className="w-1/3 ">{type}</span>
                                      <span className="flex-grow">{count}</span>
                                    </li>
                                  ))}
                                </ul>
                              </div>
                              <div className="mt-4">
                                <h2 className="text-sm font-semibold ">
                                  Contained Resources
                                </h2>
                                <div className="py-2 rounded-md ">
                                  <ul className="flex font-semibold">
                                    <li className="w-[60%]">SHA-256</li>
                                    <li className="w-1/6">File Type</li>
                                    <li className="w-1/6">Type</li>
                                    <li className="w-1/6">Language</li>
                                    <li className="w-1/6">Entropy</li>
                                    <li className="w-1/6"></li>
                                  </ul>
                                  {virusTotal?.attributes?.pe_info?.resource_details?.map(
                                    (detail, idx) => (
                                      <ul
                                        key={idx}
                                        className="flex p-1 rounded-md mb-2"
                                      >
                                        <li className="w-[60%]">
                                          {detail.sha256}
                                        </li>
                                        <li className="w-1/6">
                                          {detail.filetype}
                                        </li>
                                        <li className="w-1/6">{detail.type}</li>
                                        <li className="w-1/6">{detail.lang}</li>
                                        <li className="w-1/6">
                                          {detail.entropy}
                                        </li>
                                        <li className="w-1/6">{detail.chi2}</li>
                                      </ul>
                                    )
                                  )}
                                </div>
                              </div>
                            </div>
                          </ul>
                        </div>
                      </div>
                      // </div>
                    )}
                  </>
                ) : virusTotalTab === "DETECTION" ? (
                  <>
                    <div className="border-t border-b border-gray-700 flex justify-between p-2">
                      <p className="text-sm"> Security vendors' analysis</p>
                      {/* <p className="text-sm">
                        {" "}
                        Do you want to automate checks?
                      </p> */}
                    </div>
                    <div className="overflow-x-auto mt-2">
                      <table className="min-w-full bg-deepNavy rounded-lg text-left border border-gray-700 ">
                        <tbody>
                          {analysisResults &&
                            Object.entries(analysisResults).map(
                              ([key, value], index) => (
                                <tr key={index} className="py-4">
                                  <td className="px-4 py-2 border-b border-gray-700 ">
                                    <span className="text-sm">
                                      {value.engine_name}
                                    </span>
                                  </td>
                                  <td className="px-4 py-2 border-b border-gray-700 text-sm">
                                    {virusTotal.type != "file" &&
                                    value.result === "clean" ? (
                                      <div className="flex gap-2 items-center">
                                        <FaRegCircleCheck
                                          size={16}
                                          className="text-green-300"
                                        />
                                        {value.result}
                                      </div>
                                    ) : virusTotal.type != "file" &&
                                      value.result === "unrated" ? (
                                      <div className="flex gap-2 items-center">
                                        <MdQuestionMark />
                                        <span className="text-gray-300">
                                          {value.result}
                                        </span>
                                      </div>
                                    ) : (
                                      virusTotal.type != "file" && (
                                        <div className="flex gap-2 items-center">
                                          <IoMdInformationCircleOutline
                                            size={18}
                                            className="text-yellow-300"
                                          />
                                          <span className=" text-yellow-300 ">
                                            Suspicious
                                          </span>
                                        </div>
                                      )
                                    )}

                                    {virusTotal.type === "file" &&
                                    value.category === "undetected" ? (
                                      <div className="flex gap-2 items-center">
                                        <FaRegCircleCheck
                                          size={16}
                                          className="text-green-300"
                                        />
                                        {value.category}
                                      </div>
                                    ) : virusTotal?.type === "file" &&
                                      value.category === "malicious" ? (
                                      <div className="flex gap-2 items-center text-red-500">
                                        <IoMdInformationCircleOutline
                                          size={18}
                                          className="text-red-500"
                                        />
                                        {value.result}
                                      </div>
                                    ) : virusTotal?.type === "file" &&
                                      value.category === "type-unsupported" ? (
                                      <div className="flex gap-2 items-center">
                                        <FaRegEyeSlash />
                                        <span className="text-gray-300">
                                          {/* {value.category} */}
                                          Unable to process file type
                                        </span>
                                      </div>
                                    ) : (
                                      virusTotal?.type === "file" && (
                                        <div className="flex gap-2 items-center">
                                          <IoMdInformationCircleOutline
                                            size={18}
                                            className="text-yellow-300"
                                          />
                                          <span className=" text-yellow-300 ">
                                            Suspicious
                                          </span>
                                        </div>
                                      )
                                    )}
                                  </td>
                                </tr>
                              )
                            )}
                        </tbody>
                      </table>
                    </div>
                  </>
                ) : virusTotalTab === "DETAILS" ? (
                  <>
                    {virusTotal?.type != "file" && (
                      <div className="text-white font-sans">
                        {openPortList&& openPortList.length > 0 && (
                          <div className="mb-6">
                            <h2 className="text-lg font-semibold text-sm border-y border-gray-700 py-2 px-2 mb-2">
                              Open Ports
                            </h2>
                            {openPortList&&
                              openPortList.map((item, ind) => (
                                <p
                                  key={ind}
                                  className="bg-gray-200 mb-1 font-xl text-black px-2 w-24 text-center rounded-md"
                                >
                                  {item}
                                </p>
                              ))}
                          </div>
                        )}
                        {/* Categories Section */}
                        {categories && Object.keys(categories).length > 0 && (
                          <div className="mb-6">
                            <h2 className="text-lg font-semibold text-sm border-y border-gray-700 py-2 px-2 mb-2">
                              Categories
                            </h2>
                            <ul className="space-y-2 text-sm px-2">
                              {categories &&
                                Object.entries(categories).map(
                                  ([key, value]) => (
                                    <li key={key} className="flex">
                                      <span className="w-1/6">{key}</span>
                                      <span className="flex-grow">{value}</span>
                                    </li>
                                  )
                                )}
                            </ul>
                          </div>
                        )}

                        {/* Popularity Ranks Section */}
                        {virusTotal?.attributes?.popularity_ranks && (
                          <div className="mb-6">
                            <h2 className="text-lg font-semibold text-sm border-y border-gray-700 py-2 px-2 mb-2">
                              Popularity ranks
                            </h2>
                            <div className="bg-deepNavy rounded-md px-2">
                              <div className="flex text-gray-400 font-semibold mb-2">
                                <span className="w-1/6">Position</span>
                                <span className="w-1/6">Rank</span>
                                <span className="w-1/6">Ingestion Time</span>
                              </div>

                              <ul>
                                {Object.entries(
                                  virusTotal?.attributes?.popularity_ranks
                                ).map(([key, value]) => (
                                  <li key={key} className="flex text-sm">
                                    <span className="w-1/6 text-white">
                                      {key}
                                    </span>
                                    <span className="w-1/6 text-gray-300">
                                      {value.rank}
                                    </span>
                                    <span className="w-1/6 text-gray-300">
                                      {value.timestamp}
                                    </span>
                                  </li>
                                ))}
                              </ul>
                            </div>
                          </div>
                        )}

                        {/* Last DNS Records Section */}
                        {virusTotal?.attributes?.last_dns_records && (
                          <div className="mb-6">
                            <div className="flex justify-between items-center border-y border-gray-700 py-2 px-2">
                              <h2 className="font-semibold text-sm ">
                                Last DNS records
                              </h2>
                              <button
                                className="text-sm text-gray-400 focus:outline-none"
                                onClick={() => setIsDnsExpanded(!isDnsExpanded)}
                              >
                                {isDnsExpanded ? "▼ Collapse" : "▲ Expand"}
                              </button>
                            </div>
                            <div
                              className={`bg-deepNavy rounded-md ${
                                isDnsExpanded
                                  ? "max-h-none"
                                  : "max-h-64 overflow-y-auto"
                              }`}
                            >
                              <table className="table-auto w-full text-left text-sm">
                                <thead>
                                  <tr className="text-gray-400">
                                    <th className="px-2 py-2">Record type</th>
                                    <th className="px-2 py-2">TTL</th>
                                    <th className="px-2 py-2">Value</th>
                                  </tr>
                                </thead>
                                <tbody>
                                  {virusTotal?.attributes?.last_dns_records?.map(
                                    (record, index) => (
                                      <tr key={index}>
                                        <td className="px-2 py-2">
                                          {record.type}
                                        </td>
                                        <td className="px-2 py-2">
                                          {record.ttl}
                                        </td>
                                        <td className="px-2 py-2">
                                          {record.value}
                                        </td>
                                      </tr>
                                    )
                                  )}
                                </tbody>
                              </table>
                            </div>
                          </div>
                        )}

                        {/* Last HTTP Certificate Section */}
                        <div className="mb-6">
                          <h2 className="text-lg font-semibold text-sm border-y border-gray-700 py-2 px-2 mb-2">
                            Last HTTP Certificate
                          </h2>

                          <div className="space-y-4">
                            <div className="mb-6">
                              <h2 className="text-lg font-semibold mb-2 text-sm">
                                Jram Fingerprint
                              </h2>
                              <div className="">
                                <ul className="space-y-2 text-sm">
                                  {jarmData &&
                                    Object.entries(jarmData).map(
                                      ([key, value]) => (
                                        <span className="flex-grow">
                                          {value}
                                        </span>
                                      )
                                    )}
                                </ul>
                              </div>
                            </div>

                            {/* Last HTTPS Certificate Section */}
                            <div>
                              <div className="flex justify-between items-center mb-4 border-y border-gray-700 py-2 px-2">
                                <h3 className="font-semibold text-sm">
                                  Last HTTPS Certificate
                                </h3>
                                <button
                                  className="text-sm text-gray-400 focus:outline-none"
                                  onClick={() =>
                                    setIsCertExpanded(!isCertExpanded)
                                  }
                                >
                                  {isCertExpanded ? "▼ Collapse" : "▲ Expand"}
                                </button>
                              </div>
                              <div
                                className={`px-2 ${
                                  isCertExpanded
                                    ? "max-h-none"
                                    : "max-h-64 overflow-y-auto"
                                }`}
                              >
                                <pre className="text-sm whitespace-pre-wrap break-words text-sm">
                                  {JSON.stringify(
                                    virusTotal?.attributes?.last_https_certificate,
                                    null,
                                    2
                                  )}
                                </pre>
                              </div>
                            </div>
                          </div>
                        </div>

                        <div className="mb-6">
                          <h2 className="text-sm font-semibold my-4 border-y border-gray-700 py-2 px-2 mb-2">
                            Who is Lookup
                          </h2>

                          <div className=" max-h-64 overflow-y-auto px-2">
                            <table
                              border="1"
                              cellPadding="5"
                              style={{
                                borderCollapse: "collapse",
                                width: "100%",
                              }}
                            >
                              <tbody>
                                {formattedData?.map((item, index) => (
                                  <tr key={index}>
                                    <td className="text-sm sm:w-1/6">
                                      {item.key} :
                                    </td>
                                    <td className="text-sm ">{item.value}</td>
                                  </tr>
                                ))}
                              </tbody>
                            </table>
                            <ul className="space-y-2">
                              {/* {virusTotal?.attributes?.whois?.map((data, index) => {
              return data.split("\n").map((line, idx) => {
                const [label, value] = line.split(": ");
                return (
                  <li key={`${index}-${idx}`} className="flex">
                    <span className="text-white">{label}:</span>
                    <span className="text-white">{value}</span>
                  </li>
                );
              });
            })} */}
                              {virusTotal?.attributes?.whois
                                ?.split(/\r?\n/)
                                .map((line) => {
                                  <p>{line}</p>;
                                })}
                            </ul>
                          </div>
                        </div>
                      </div>
                    )}
                    {virusTotal?.type === "file" && (
                      //  <div className="bg-gray-900 text-white min-h-screen p-6 font-sans">

                      <div className="mb-6">
                        <div className=" p-4 rounded-md">
                          <div className="text-sm font-semibold mb-4 border-y border-gray-700 py-2">
                            Basic Properties
                          </div>
                          <ul className="space-y-2 text-sm">
                            <li className="flex ">
                              <span className="w-1/6 font-medium capitalize">
                                md5
                              </span>
                              <span className="flex-grow">
                                {virusTotal?.attributes?.md5}
                              </span>
                            </li>
                            <li className="flex">
                              <span className="w-1/6 font-medium capitalize">
                                SHA1
                              </span>
                              <span className="flex-grow">
                                {virusTotal?.attributes?.sha1}
                              </span>
                            </li>
                            <li className="flex">
                              <span className="w-1/6 font-medium capitalize">
                                SHA-256
                              </span>
                              <span className="flex-grow">
                                {virusTotal?.attributes?.sha256}
                              </span>
                            </li>
                            <li className="flex">
                              <span className="w-1/6 font-medium capitalize">
                                Vhash
                              </span>
                              <span className="flex-grow">
                                {virusTotal?.attributes?.vhash}
                              </span>
                            </li>
                            <li className="flex">
                              <span className="w-1/6 font-medium capitalize">
                                Authentihash
                              </span>
                              <span className="flex-grow">
                                {virusTotal?.attributes?.authentihash}
                              </span>
                            </li>
                            <li className="flex">
                              <span className="w-1/6 font-medium capitalize">
                                Imphash
                              </span>
                              <span className="flex-grow">
                                {virusTotal?.attributes?.pe_info?.imphash}
                              </span>
                            </li>
                            <li className="flex">
                              <span className="w-1/6 font-medium capitalize">
                                SSDEEP
                              </span>
                              <span className="flex-grow">
                                {virusTotal?.attributes?.ssdeep} bytes
                              </span>
                            </li>
                            <li className="flex">
                              <span className="w-1/6 font-medium capitalize">
                                TLSH
                              </span>
                              <span className="flex-grow">
                                {virusTotal?.attributes?.tlsh}
                              </span>
                            </li>
                            <li className="flex">
                              <p className="w-1/6 text-sm font-semibold">
                                File Type
                              </p>

                              <ul className="flex flex-grow flex-wrap space-x-2 text-sm">
                                {virusTotal?.attributes?.trid?.map(
                                  (item, idx) => (
                                    <li key={idx} className="flex items-center">
                                      <span>{item.file_type}</span>
                                      {idx !==
                                        virusTotal?.attributes?.trid?.length -
                                          1 && <span className="px-1">|</span>}
                                    </li>
                                  )
                                )}
                              </ul>
                            </li>
                            <li className="flex">
                              <span className="w-1/6 font-medium capitalize text-sm">
                                Magic
                              </span>
                              <span className="flex-grow">
                                {virusTotal?.attributes?.magic}{" "}
                              </span>
                            </li>
                            <div className="flex items-center text-sm">
                              <h2 className="w-1/6 text-sm font-semibold ">
                                Trid
                              </h2>
                              <ul className="flex flex-wrap space-x-2 text-sm">
                                {virusTotal?.attributes?.trid?.map(
                                  (item, idx, arr) => (
                                    <li key={idx} className="flex items-center">
                                      <span>
                                        {item.file_type} {item.probability}
                                      </span>
                                      {idx !== arr.length - 1 && (
                                        <span className=""> | </span>
                                      )}
                                    </li>
                                  )
                                )}
                              </ul>
                            </div>
                            <div className="flex items-center">
                              <h2 className="w-1/6 font-semibold text-sm ">
                                DetectItEasy
                              </h2>
                              <ul>
                                <li className="flex space-x-4 text-sm">
                                  <span>
                                    {
                                      virusTotal?.attributes?.detectiteasy
                                        ?.filetype
                                    }
                                  </span>
                                  {/* Map and format values */}
                                  {virusTotal?.attributes?.detectiteasy?.values?.map(
                                    (item, idx) => (
                                      <span key={idx} className="ml-2">
                                        {item.type}: {item.name}{" "}
                                        {item.info ? `(${item.info})` : ""}{" "}
                                        {item.version
                                          ? `[v${item.version}]`
                                          : ""}
                                      </span>
                                    )
                                  )}
                                </li>
                              </ul>
                            </div>

                            <li className="flex">
                              <span className="w-1/6 font-medium  text-sm capitalize">
                                Magika
                              </span>
                              <span className="flex-grow">
                                {virusTotal?.attributes?.magika}
                              </span>
                            </li>
                            <li className="flex">
                              <span className="w-1/6 font-medium capitalize">
                                file size
                              </span>
                              <span className="flex-grow">
                                {virusTotal?.attributes?.size}
                              </span>
                            </li>
                            <div className="my-4">
                              <div className="text-md mt-8 font-semibold border-y border-gray-700 py-2 mb-1">
                                History
                              </div>
                              <div className=" rounded-md mb-8">
                                <ul className="space-y-2">
                                  <li className="flex">
                                    <span className="w-1/6 font-medium capitalize">
                                      first submission date
                                    </span>
                                    <span className="flex-grow">
                                      {convertUnixToDate(
                                        virusTotal?.attributes
                                          ?.first_submission_date
                                      )}
                                    </span>
                                  </li>
                                  <li className="flex">
                                    <span className="w-1/6 font-medium capitalize">
                                      Last Submission Date
                                    </span>
                                    <span className="flex-grow">
                                      {convertUnixToDate(
                                        virusTotal?.attributes
                                          ?.last_submission_date
                                      )}
                                    </span>
                                  </li>
                                  <li className="flex">
                                    <span className="w-1/6 font-medium capitalize">
                                      last_analysis_date
                                    </span>
                                    <span className="flex-grow">
                                      {convertUnixToDate(
                                        virusTotal?.attributes
                                          ?.last_analysis_date
                                      )}
                                    </span>
                                  </li>
                                  {/* <li className="flex">
                                                   <span className="w-1/6 font-medium capitalize">Last Modification Date</span>
                                                   <span className="flex-grow">
                                                       {convertUnixToDate(virusTotal.attributes.last_modification_date)}
                                                   </span>
                                           </li>
                                           <li className="flex">
                                                   <span className="w-1/6 font-medium capitalize">first_seen_itw_date </span>
                                                   <span className="flex-grow">
                                                       {convertUnixToDate(virusTotal.attributes.first_seen_itw_date)} 
                                                   </span>
                                           </li>
                                           <li className="flex">
                                                   <span className="w-1/6 font-medium capitalize">Name</span>
                                                   <span className="flex-grow">{virusTotal.attributes.names.map((item,ind) => <p  key={ind}>{item}</p>)}</span>
                                           </li> */}
                                </ul>
                              </div>
                            </div>
                            <div className="text-lg font-semibold my-6 border-y border-gray-700 py-2">
                              Portable Executable Info
                            </div>
                            <h2 className="text-lg">Sections</h2>
                            <div className=" rounded-md sm:w-[90%]">
                              <ul className="flex font-semibold mb-2 ">
                                <li className="w-1/6">Name</li>
                                <li className="w-1/6">Virtual Address</li>
                                <li className="w-1/6">Virtual Size</li>
                                <li className="w-1/6">Raw Size</li>
                                <li className="w-1/6">Entropy</li>
                                <li className="w-2/6">MD5</li>
                                <li className="w-1/6">Chi2</li>
                              </ul>
                              {virusTotal?.attributes?.pe_info?.sections?.map(
                                (section, idx) => (
                                  <ul
                                    key={idx}
                                    className="flex p-1 rounded-md mb-2"
                                  >
                                    <li className="w-1/6">{section.name}</li>
                                    <li className="w-1/6">
                                      {section.virtual_address}
                                    </li>
                                    <li className="w-1/6">
                                      {section.virtual_size}
                                    </li>
                                    <li className="w-1/6">
                                      {section.raw_size}
                                    </li>
                                    <li className="w-1/6">{section.entropy}</li>
                                    <li className="w-2/6">{section.md5}</li>
                                    <li className="w-1/6">{section.chi2}</li>
                                  </ul>
                                )
                              )}
                            </div>
                            <div className="mt-6">
                              <h2 className="text-md font-semibold">Imports</h2>
                              <ul className="space-y-4 py-2">
                                {limitedImportList?.map((library, idx) => (
                                  <li key={idx} className="text-sm">
                                    {/* Library Name */}
                                    <button
                                      className="text-xl font-bold text-blue-500"
                                      onClick={() =>
                                        toggleLibrary(library.library_name)
                                      }
                                    >
                                      {expandedLibrary === library.library_name
                                        ? "-"
                                        : "+"}
                                    </button>
                                    <span className="text-sm font-medium px-2">
                                      {library.library_name}
                                    </span>
                                    {/* Imported Functions */}
                                    {expandedLibrary ===
                                      library?.library_name && (
                                      <ul className="mt-2 ml-4 space-y-1">
                                        {library?.imported_functions?.map(
                                          (func, funcIdx) => (
                                            <li
                                              key={funcIdx}
                                              className="text-sm"
                                            >
                                              {func}
                                            </li>
                                          )
                                        )}
                                      </ul>
                                    )}
                                  </li>
                                ))}
                              </ul>
                            </div>
                            <div>
                              <div className="mt-4">
                                <h2 className="text-sm font-semibold ">
                                  Contained Resources by Type
                                </h2>
                                <ul className="space-y-2 py-2">
                                  {virusTotal?.attributes?.pe_info
                                      ?.resource_types && Object.entries(
                                    virusTotal?.attributes?.pe_info
                                      ?.resource_types
                                  ).map(([type, count], idx) => (
                                    <li key={idx} className="flex">
                                      <span className="w-1/3 ">{type}</span>
                                      <span className="flex-grow">{count}</span>
                                    </li>
                                  ))}
                                </ul>
                              </div>
                              <div className="my-2">
                                <h2 className="text-sm font-semibold py-2">
                                  Contained Resources by Languages
                                </h2>
                                <ul className="space-y-2">
                                  {  virusTotal?.attributes?.pe_info
                                      ?.resource_langs && Object.entries(
                                    virusTotal?.attributes?.pe_info
                                      ?.resource_langs
                                  ).map(([type, count], idx) => (
                                    <li key={idx} className="flex">
                                      <span className="w-1/3 ">{type}</span>
                                      <span className="flex-grow">{count}</span>
                                    </li>
                                  ))}
                                </ul>
                              </div>
                              <div className="mt-4">
                                <h2 className="text-sm font-semibold ">
                                  Contained Resources
                                </h2>
                                <div className="py-2 rounded-md ">
                                  <ul className="flex font-semibold">
                                    <li className="w-[60%]">SHA-256</li>
                                    <li className="w-1/6">File Type</li>
                                    <li className="w-1/6">Type</li>
                                    <li className="w-1/6">Language</li>
                                    <li className="w-1/6">Entropy</li>
                                    <li className="w-1/6"></li>
                                  </ul>
                                  {virusTotal?.attributes?.pe_info?.resource_details?.map(
                                    (detail, idx) => (
                                      <ul
                                        key={idx}
                                        className="flex p-1 rounded-md mb-2"
                                      >
                                        <li className="w-[60%]">
                                          {detail.sha256}
                                        </li>
                                        <li className="w-1/6">
                                          {detail.filetype}
                                        </li>
                                        <li className="w-1/6">{detail.type}</li>
                                        <li className="w-1/6">{detail.lang}</li>
                                        <li className="w-1/6">
                                          {detail.entropy}
                                        </li>
                                        <li className="w-1/6">{detail.chi2}</li>
                                      </ul>
                                    )
                                  )}
                                </div>
                              </div>
                            </div>
                          </ul>
                        </div>
                      </div>
                      // </div>
                    )}
                  </>
                ) : virusTotalTab === "RELATIONS" ? (
                  <></>
                ) : null}
              </div>
            </div>
          )
        ) : null}
      </main>
      <Footer />
   
    </div>
  );
};

export default FindIntel;
